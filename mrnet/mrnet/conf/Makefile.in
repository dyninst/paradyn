MRNET_VERSION  = @MRNET_VERSION@
MRNET_ROOT     = @MRNET_ROOT@
MRNET_PLATFORM = @host@

@SET_MAKE@
SHELL = @SHELL@

#############################
#### INSTALL DIRECTORIES ####
#############################

BINDIR  = ./bin/${MRNET_PLATFORM}
LIBDIR  = ./lib/${MRNET_PLATFORM}
OBJDIR  = ./obj/${MRNET_PLATFORM}
DEPENDDIR = ./depends
SRCDIR  = @abs_srcdir@
PREFIX  = @prefix@

prefix  = @prefix@
exec_prefix=@exec_prefix@
IBINDIR = @bindir@
ILIBDIR = @libdir@
IINCDIR = @includedir@

##########################
### AUXILIARY PROGRAMS ###
##########################
FLEX    = @FLEX@
BISON   = @BISON@
AR      = @AR@
ARFLAGS = @ARFLAGS@
RANLIB  = @RANLIB@
INSTALL = @INSTALL@
PURIFY = @PURIFY@

#####################
# General Definitions
#####################

VPATH   = $(SRCDIR)/src:$(SRCDIR)/tests:$(SRCDIR)/tests/test_Recovery

CXX = @CXX@
CXXFLAGS = @CXXFLAGS@ $(INCDIR) $(WARNFLAGS)
LDFLAGS = @LDFLAGS@
SOFLAGS = @SOFLAGS@
C_AS_CPLUSPLUS = @C_AS_CPLUSPLUS@
LIBS = $(LIBXPLAT) @LIBS@

MAKEDEPENDS = $(SRCDIR)/conf/makedepends.sh

BUILD_SHARED_LIBS = @BUILDSHARED@

COMPILER_TYPE = @COMPILER_TYPE@

ifeq ($(COMPILER_TYPE), gnu)

    ifndef SILENCE_WARNINGS
    WARNFLAGS = -Wall \
                -W \
	        -Wno-system-headers \
                -Wfloat-equal \
                -Wconversion \
                -Wshadow \
                -Wpointer-arith \
                -Wcast-qual \
                -Wcast-align \
                -Wwrite-strings \
                -Wsign-compare \
                -Wredundant-decls \
                -Wlong-long \
	        -Woverloaded-virtual   \
	        -Wno-non-template-friend
   endif # SILENCE_WARNINGS

endif #GNU options

ifeq ($(COMPILER_TYPE), forte)
    ifndef SILENCE_WARNINGS
        WARNFLAGS = +w +w2
    endif # SILENCE_WARNINGS
endif #Forte (Sun) compiler warnings

#############################
# System Specific Definitions
#############################
LIBMRNET    = $(LIBDIR)/libmrnet.a
LIBMRNET_SO = $(LIBDIR)/libmrnet.so
LIBXPLAT    = $(MRNET_ROOT)/xplat/libxplat.a
LIBXPLAT_SO = $(MRNET_ROOT)/xplat/libxplat.so
COMMNODE    = $(BINDIR)/mrnet_commnode 

TARGETS     = $(LIBMRNET) $(COMMNODE) $(BINDIR)/mrnet_topgen
ifeq ($(BUILD_SHARED_LIBS), yes)
    TARGETS += $(LIBXPLAT_SO) $(LIBMRNET_SO)
endif

INCDIR      = -I$(MRNET_ROOT)/src -I$(SRCDIR)/include -I$(SRCDIR)/src -I$(SRCDIR) \
              -I$(SRCDIR)/xplat/include -I$(SRCDIR)/tests

STD_TESTS = $(BINDIR)/test_basic_FE \
            $(BINDIR)/test_basic_BE  \
            $(BINDIR)/microbench_FE \
            $(BINDIR)/microbench_BE \
            $(BINDIR)/test_arrays_FE \
            $(BINDIR)/test_arrays_BE \
            $(BINDIR)/test_NativeFilters_FE \
            $(BINDIR)/test_NativeFilters_BE \
            $(BINDIR)/test_DynamicFilters_FE \
            $(BINDIR)/test_DynamicFilters_BE

OPT_TESTS = $(BINDIR)/test_Recovery_FE \
	    $(BINDIR)/test_Recovery_BE

###################################
# Object and Executable Definitions
###################################
LIBMRNET_SRCS = \
	         $(SRCDIR)/src/BackEndNode.C \
	         $(SRCDIR)/src/byte_order.c \
	         $(SRCDIR)/src/ChildNode.C \
	         $(SRCDIR)/src/CommunicationNode.C \
	         $(SRCDIR)/src/Communicator.C \
	         $(SRCDIR)/src/DataElement.C \
	         $(SRCDIR)/src/EventDetector.C \
	         $(SRCDIR)/src/Error.C \
	         $(SRCDIR)/src/Filter.C \
	         $(SRCDIR)/src/FilterDefinitions.C \
	         $(SRCDIR)/src/FrontEndNode.C \
	         $(SRCDIR)/src/InternalNode.C \
	         $(SRCDIR)/src/Message.C \
	         $(SRCDIR)/src/Network.C \
	         $(SRCDIR)/src/NetworkTopology.C \
	         $(SRCDIR)/src/Packet.C \
	         $(SRCDIR)/src/ParadynFilterDefinitions.C \
	         $(SRCDIR)/src/ParsedGraph.C \
	         $(OBJDIR)/parser.tab.C \
	         $(SRCDIR)/src/ParentNode.C \
	         $(SRCDIR)/src/pdr.c \
	         $(SRCDIR)/src/pdr_mem.c \
	         $(SRCDIR)/src/pdr_sizeof.c \
	         $(SRCDIR)/src/PeerNode.C \
	         $(SRCDIR)/src/Router.C \
	         $(OBJDIR)/scanner.C \
	         $(SRCDIR)/src/SerialGraph.C \
	         $(SRCDIR)/src/Stream.C \
	         $(SRCDIR)/src/Tree.C \
	         $(SRCDIR)/src/PerfDataEvent.C \
	         $(SRCDIR)/src/utils.C

LIBMRNET_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(LIBMRNET_SRCS)))))
 
COMMNODE_SRCS = $(SRCDIR)/src/CommunicationNodeMain.C
COMMNODE_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(COMMNODE_SRCS)))))

PDR_SRCS = $(SRCDIR)/src/pdr.c \
	        $(SRCDIR)/src/pdr_mem.c \
	        $(SRCDIR)/src/pdr_sizeof.c \
	        $(SRCDIR)/src/byte_order.c
PDR_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(PDR_SRCS)))))

ALL_SRCS = $(LIBMRNET_SRCS) $(COMMNODE_SRCS) $(TEST_SRCS)
DEPS	= $(addprefix $(DEPENDDIR)/, $(patsubst %.C,%.d,$(patsubst %.c,%.d,$(notdir $(ALL_SRCS)))))


all: xplat-all $(TARGETS)

xplat-all:
	cd ./xplat ; $(MAKE) all

xplat-sharedobj:
	cd ./xplat ; $(MAKE) sharedobj

install: install-local xplat-install

install-local: all
	@echo Creating install directories
	for dir in $(IBINDIR) $(ILIBDIR) $(IINCDIR) $(IINCDIR)/mrnet ; do \
	    if [ ! -d $$dir ] ; then \
	        mkdir -p $$dir ; \
	        chmod 755 $$dir ; \
	    fi \
	done
	if [ ! -x `echo $(INSTALL) | sed 's/ .*$$//'` ] ; then \
	    chmod +x `echo $(INSTALL) | sed 's/ .*$$//'` ; \
	fi
	@echo Installing binaries
	$(INSTALL) -p -m 555 $(COMMNODE) $(BINDIR)/mrnet_topgen $(IBINDIR)/
	@echo Installing libraries
	$(INSTALL) -p -m 555 $(LIBMRNET) $(ILIBDIR)/
	if [ "$(BUILD_SHARED_LIBS)" == "yes" ] ; then \
            $(INSTALL) -p -m 555 $(LIBMRNET_SO) $(ILIBDIR)/ \
	fi
	@echo Installing headers
	for hdr in @srcdir@/include/mrnet/*.h ; do \
	    $(INSTALL) -p -m 444 $$hdr $(IINCDIR)/mrnet/ ; \
	done
	for hdr in @srcdir@/src/*.h ; do \
	    $(INSTALL) -p -m 444 $$hdr $(IINCDIR)/mrnet/ ; \
	done

install-tests: mrnet-tests $(BINDIR)/mrnet_tests.sh
	@echo Installing standard tests
	$(INSTALL) -p -m 555 $(STD_TESTS) $(BINDIR)/mrnet_tests.sh $(IBINDIR)/
	$(INSTALL) -p -m 555 $(LIBDIR)/test_DynamicFilters.so $(ILIBDIR)/
	if [ ! -d $(IBINDIR)/topology_files ] ; then \
            mkdir -p $(IBINDIR)/topology_files ; \
	    chmod 755 $(IBINDIR)/topology_files ; \
	fi
	for top in $(SRCDIR)/tests/topology_files/local-*.top ; do \
	    $(INSTALL) -p -m 444 $$top $(IBINDIR)/topology_files/ ; \
	done

install-tests-opt: mrnet-tests-opt
	@echo Installing optional tests
	$(INSTALL) -p -m 555 $(OPT_TESTS) $(IBINDIR)/
	$(INSTALL) -p -m 555 $(LIBDIR)/test_RecoveryFilter.so $(ILIBDIR)/

xplat-install:
	@echo Installing xplat library
	cd ./xplat ; $(MAKE) install

mrnet-tests: all $(STD_TESTS)

mrnet-tests-opt: $(OPT_TESTS)

$(OBJDIR)/scanner.C: $(SRCDIR)/src/scanner.l $(OBJDIR)/parser.tab.C $(FRC)
	@echo Building `basename $@` ...
	$(RM)  $@; $(FLEX) -Pmrn -t $< > $@ 

$(OBJDIR)/parser.tab.C $(OBJDIR)/parser.tab.h: $(SRCDIR)/src/parser.y $(FRC)
	@echo Building `basename $@` ...
	$(BISON) -p mrn -d -y $<
	mv y.tab.c $(OBJDIR)/parser.tab.C
	mv y.tab.h $(OBJDIR)/parser.tab.h

$(LIBMRNET): $(LIBMRNET_OBJS)
	@echo Archiving `basename $@` ...
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@

$(LIBMRNET_SO): $(LIBMRNET_OBJS)
	@echo Building `basename $@` ...
	$(CXX) $(SOFLAGS) -o $@ $(LIBMRNET_OBJS)

$(LIBXPLAT): xplat-all

$(LIBXPLAT_SO): xplat-sharedobj

$(BINDIR)/mrnet_commnode: $(COMMNODE_OBJS) $(LIBMRNET) $(LIBXPLAT)
	@echo Linking `basename $@` ...
	$(PURIFY) $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(COMMNODE_OBJS) \
	   $(LIBMRNET) $(LIBS)

$(BINDIR)/mrnet_topgen: $(OBJDIR)/config_generator.o $(LIBMRNET) $(LIBXPLAT)
	@echo "Linking `basename $@` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) -o $@ $(OBJDIR)/config_generator.o \
           $(LIBMRNET) $(LIBS)

$(STD_TESTS): $(BINDIR)/%: $(LIBMRNET) $(OBJDIR)/test_common.o $(OBJDIR)/%.o \
              $(LIBDIR)/test_DynamicFilters.so $(SRCDIR)/tests/test_common.h \
              $(BINDIR)/mrnet_tests.sh
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_common.o $(LIBMRNET) $(LIBS)

$(BINDIR)/mrnet_tests.sh: $(SRCDIR)/conf/mrnet_tests.sh
	cp $(SRCDIR)/conf/mrnet_tests.sh $(BINDIR)/


$(LIBDIR)/test_DynamicFilters.so: $(SRCDIR)/tests/test_DynamicFilters.C
	@echo "Building `basename $@` ..."
	$(CXX) $(CXXFLAGS) $(SOFLAGS) -o $@ $(SRCDIR)/tests/test_DynamicFilters.C

$(BINDIR)/test_Recovery_FE: $(BINDIR)/%: $(LIBMRNET) \
                            $(OBJDIR)/%.o \
                            $(OBJDIR)/test_Recovery.o \
                            $(OBJDIR)/ThroughputExperiment.o \
                            $(OBJDIR)/test_Recovery_aux.o \
                            $(LIBDIR)/test_RecoveryFilter.so
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_Recovery.o $(OBJDIR)/test_Recovery_aux.o \
           $(OBJDIR)/ThroughputExperiment.o $(LIBMRNET) $(LIBS)

$(BINDIR)/test_Recovery_BE: $(BINDIR)/%: $(LIBMRNET) \
                            $(OBJDIR)/%.o \
                            $(OBJDIR)/ThroughputExperiment.o \
                            $(OBJDIR)/test_Recovery.o
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o \
           $(OBJDIR)/ThroughputExperiment.o \
           $(OBJDIR)/test_Recovery.o $(LIBMRNET) $(LIBS)

$(LIBDIR)/test_RecoveryFilter.so: $(SRCDIR)/tests/test_Recovery/test_RecoveryFilter.C
	@echo "Building `basename $@` ..."
	$(CXX) $(CXXFLAGS) $(SOFLAGS) -o $@ $(SRCDIR)/tests/test_Recovery/test_RecoveryFilter.C

$(BINDIR)/pdr_test: $(PDR_OBJS) tests/xdr_test.c
	@echo "Linking `basename $@` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) -Itests -o $@ $(PDR_OBJS) tests/pdr_test.c $(LIBS)

$(BINDIR)/xdr_test: tests/xdr_test.c
	@echo "Linking `basename $@` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) -Itests -o $@ -DUSE_XDR tests/xdr_test.c $(LIBS)


#################################
# Defining Cleaning rules
#################################
clean: local-clean xplat-clean

local-clean:
	@echo Cleaning $(MRNET_PLATFORM) platform ...
	$(RM) $(BINDIR)/* $(LIBDIR)/* $(OBJDIR)/*
	$(RM)  `find $(MRNET_ROOT) -name "*~" -print`

xplat-clean:
	@echo Cleaning xplat library
	cd ./xplat ; $(MAKE) clean

CLEAN: local-CLEAN xplat-clean

local-CLEAN:
	@echo Cleaning all platforms ...
	$(RM) -r $(DEPENDDIR) bin lib obj
	$(RM)  `find $(MRNET_ROOT) -name "*~" -print`

distclean: local-distclean xplat-distclean

local-distclean: local-CLEAN
	$(RM)  config.* conf/Makefile*.inc src/config.h Makefile
	$(RM) -r autom4te.cache

xplat-distclean:
	@echo "Cleaning xplat library (distclean)"
	cd ./xplat ; $(MAKE) distclean

#################################
# Defining Default Build rules
#################################
@VERBOSEMAKE@
.SUFFIXES:
.SUFFIXES: .c .C .o .d

$(OBJDIR)/%.o: %.c $(FRC)
	@echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) $(C_AS_CPLUSPLUS) -o $@ -c $<

$(OBJDIR)/%.o: %.C $(FRC)
	@echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) -o $@ -c $<

$(DEPENDDIR)/%.d: %.c $(FRC)
	@echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCDIR) 


$(DEPENDDIR)/%.d: %.C $(FRC)
	@echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCDIR) 

-include $(DEPS)
