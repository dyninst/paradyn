MRNET_VERSION  = @MRNET_VERSION@
MRNET_ROOT     = @MRNET_ROOT@
MRNET_PLATFORM = @host@

@SET_MAKE@
SHELL = @SHELL@

#############################
#### INSTALL DIRECTORIES ####
#############################

BINDIR  = ./bin/$(MRNET_PLATFORM)
LIBDIR  = ./lib/$(MRNET_PLATFORM)
OBJDIR  = ./obj/$(MRNET_PLATFORM)
SRCDIR  = @srcdir@
PREFIX  = @prefix@


##########################
### AUXILIARY PROGRAMS ###
##########################
FLEX    = @FLEX@
BISON   = @BISON@
AR      = @AR@
ARFLAGS = @ARFLAGS@
RANLIB  = @RANLIB@

#####################
# General Definitions
#####################

VPATH   = $(SRCDIR)/src:$(SRCDIR)/tests

CXX = @CXX@
CXXFLAGS = @CXXFLAGS@ $(INCDIR) $(WARNFLAGS)
LDFLAGS = @LDFLAGS@
SOFLAGS = @SOFLAGS@
C_AS_CPLUSPLUS = @C_AS_CPLUSPLUS@
LIBS = @LIBS@

MAKEDEPENDS = $(SRCDIR)/conf/makedepends.sh
DEPENDDIR = ./depends

GCC_VER := $(shell $(CXX) --version 2> /dev/null )
ifeq (GCC,$(findstring GCC,$(GCC_VER)))
GNU_COMPILER = true
endif

ifdef GNU_COMPILER
ifndef SILENCE_WARNINGS
WARNFLAGS = -Wall \
	        -Wpointer-arith        \
	        -Wcast-qual            \
	        -Wstrict-prototypes    \
	        -Wmissing-prototypes   \
	        -Woverloaded-virtual   \
	        -Winline               \
	        -Wno-deprecated        \
	        -Wwrite-strings        \
	        -Wconversion           \
	        -Wshadow               \
	        -Wredundant-decls      \
	        -Wno-non-template-friend
endif # SILENCE_WARNINGS

# add pthread flag for GNU compiler
CFLAGS      += -pthread
CXXFLAGS    += -pthread
LDFLAGS     += -pthread

ifeq (solaris,$(findstring solaris,$(MRNET_PLATFORM)))
WARNFLAGS       += -Wno-unknown-pragmas
else   # STL on Solaris with cast-align generates a warning with much output
WARNFLAGS       += -Wcast-align
endif  #End GNU/Solaris
endif  #GNU_COMPILER


#############################
# System Specific Definitions
#############################
TARGETS = $(LIBMRNET) $(COMMNODE)
INCDIR = -I$(SRCDIR)/.. -I. -I$(OBJDIR)
LIBMRNET    =$(LIBDIR)/libmrnet.a
COMMNODE=$(BINDIR)/mrnet_commnode 

TESTS   = $(BINDIR)/microbench_FE \
          $(BINDIR)/microbench_BE \
          $(BINDIR)/test_basic_FE \
          $(BINDIR)/test_basic_BE \
          $(BINDIR)/test_arrays_FE \
          $(BINDIR)/test_arrays_BE \
          $(BINDIR)/test_NativeFilters_FE \
          $(BINDIR)/test_NativeFilters_BE \
          $(BINDIR)/test_DynamicFilters_FE \
          $(BINDIR)/test_DynamicFilters_BE

###################################
# Object and Executable Definitions
###################################
LIBMRNET_SRCS = \
	         $(SRCDIR)/src/utils.C \
	         $(SRCDIR)/src/pthread_sync.C \
	         $(SRCDIR)/src/EventImpl.C \
	         $(SRCDIR)/src/Errors.C \
	         $(SRCDIR)/src/pdr.c \
	         $(SRCDIR)/src/pdr_mem.c \
	         $(SRCDIR)/src/pdr_sizeof.c \
	         $(SRCDIR)/src/byte_order.c \
	         $(OBJDIR)/scanner.C \
	         $(OBJDIR)/parser.tab.C \
	         $(SRCDIR)/src/NetworkGraph.C \
	         $(SRCDIR)/src/EndPointImpl.C \
	         $(SRCDIR)/src/CommunicatorImpl.C \
	         $(SRCDIR)/src/StreamImpl.C \
	         $(SRCDIR)/src/NetworkImpl.C \
	         $(SRCDIR)/src/Network.C \
	         $(SRCDIR)/src/DataElement.C \
	         $(SRCDIR)/src/Packet.C \
	         $(SRCDIR)/src/Message.C \
	         $(SRCDIR)/src/CommunicationNode.C \
	         $(SRCDIR)/src/RemoteNode.C \
	         $(SRCDIR)/src/ParentNode.C \
	         $(SRCDIR)/src/ChildNode.C \
	         $(SRCDIR)/src/FrontEndNode.C \
	         $(SRCDIR)/src/BackEndNode.C \
	         $(SRCDIR)/src/StreamManager.C \
	         $(SRCDIR)/src/Filter.C \
	         $(SRCDIR)/src/FilterDefinitions.C \
	         $(SRCDIR)/src/InternalNode.C 

LIBMRNET_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(LIBMRNET_SRCS)))))
 
COMMNODE_SRCS = $(SRCDIR)/src/CommunicationNodeMain.C
COMMNODE_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(COMMNODE_SRCS)))))

PDR_SRCS = $(SRCDIR)/src/pdr.c \
	        $(SRCDIR)/src/pdr_mem.c \
	        $(SRCDIR)/src/pdr_sizeof.c \
	        $(SRCDIR)/src/byte_order.c
PDR_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(PDR_SRCS)))))

ALL_SRCS = $(LIBMRNET_SRCS) $(COMMNODE_SRCS) $(TEST_SRCS)
DEPS	= $(addprefix $(DEPENDDIR)/, $(patsubst %.C,%.d,$(patsubst %.c,%.d,$(notdir $(ALL_SRCS)))))

all: DIRS $(TARGETS)

test: all $(TESTS) $(BINDIR)/mrnet_topgen

rebuild:
	make "FRC=force_rebuild"

force_rebuild:

DIRS: $(OBJDIR) $(LIBDIR) $(BINDIR)

$(OBJDIR) $(LIBDIR) $(BINDIR):
	if [ ! -d $@ ] ; then \
	    echo Making directory $@ ... ; \
	    { mkdir -p $@ && [ -w $@ ]; } || \
	    { echo "$@ not a writable directory" >&2; exit 1;} \
	fi 

$(OBJDIR)/scanner.C: $(SRCDIR)/src/scanner.l $(OBJDIR)/parser.tab.C $(FRC)
	echo Building `basename $@` ...
	$(RM)  $@; $(FLEX) -Pmrn -t $< > $@ 

$(OBJDIR)/parser.tab.C $(OBJDIR)/parser.tab.h: $(SRCDIR)/src/parser.y $(FRC)
	echo Building `basename $@` ...
	$(BISON) -p mrn -d -y $<
	mv y.tab.c $(OBJDIR)/parser.tab.C
	mv y.tab.h $(OBJDIR)/parser.tab.h

$(LIBMRNET): $(LIBMRNET_OBJS)
	echo Archiving `basename $@` ...
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@

$(BINDIR)/mrnet_commnode: $(COMMNODE_OBJS) $(LIBMRNET)
	echo Linking `basename $@` ...
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@  $(COMMNODE_OBJS) $(LIBMRNET) $(LIBS)

$(BINDIR)/mrnet_topgen: $(SRCDIR)/tests/config_generator.C
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -o $@ $(SRCDIR)/tests/config_generator.C

$(TESTS): $(BINDIR)/%: $(LIBMRNET) $(OBJDIR)/test_common.o $(OBJDIR)/%.o $(OBJDIR)/test_DynamicFilters.so
	echo "Linking `basename $*` ..."
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o $(OBJDIR)/test_common.o $(LIBMRNET) $(LIBS)

$(OBJDIR)/test_DynamicFilters.so: $(SRCDIR)/tests/test_DynamicFilters.C
	echo "Building `basename $@` ..."
	$(CXX) $(CXXFLAGS) $(SOFLAGS) -o $@ $(SRCDIR)/tests/test_DynamicFilters.C

$(BINDIR)/pdr_test: $(PDR_OBJS) tests/xdr_test.c
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -Itests -o $@ $(PDR_OBJS) tests/pdr_test.c $(LIBS)

$(BINDIR)/xdr_test: tests/xdr_test.c
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -Itests -o $@ -DUSE_XDR tests/xdr_test.c $(LIBS)


#################################
# Defining Cleaning rules
#################################
clean:
	echo Cleaning $(MRNET_PLATFORM) platform ...
	$(RM) -r $(OBJDIR) $(BINDIR) $(LIBDIR)
	$(RM)  `find $(MRNET_ROOT)/.. -name "*~" -print`

CLEAN:
	echo Cleaning all platforms ...
	$(RM) -r $(DEPENDDIR) bin lib obj
	$(RM)  `find $(MRNET_ROOT)/.. -name "*~" -print`

distclean: CLEAN
	$(RM)  config.* conf/Makefile*.inc src/config.h ; $(RM) Makefile

#################################
# Defining Default Build rules
#################################
.SILENT:
.SUFFIXES:
.SUFFIXES: .c .C .o .d

$(OBJDIR)/%.o: %.c $(FRC)
	echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) $(C_AS_CPLUSPLUS) -o $@ -c $<

$(OBJDIR)/%.o: %.C $(FRC)
	echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) -o $@ -c $<

$(DEPENDDIR)/%.d: %.c $(FRC)
	echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCDIR) 


$(DEPENDDIR)/%.d: %.C $(FRC)
	echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCDIR) 

-include $(DEPS)
