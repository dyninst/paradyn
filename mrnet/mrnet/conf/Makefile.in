#####################
# General Definitions
#####################

include conf/Makefile.inc
VPATH	= $(MRNET_ROOT)/src:$(MRNET_ROOT)/tests

#CC  = gcc
#CXX = g++
CFLAGS +=   $(INCDIR) $(WARNFLAGS)
CXXFLAGS += $(INCDIR) $(WARNFLAGS)

MAKEDEPENDS = $(MRNET_ROOT)/conf/makedepends.sh
DEPENDDIR = $(MRNET_ROOT)/depends
#DEPENDFLAGS = -MM

GCC_VER := $(shell $(CXX) --version 2> /dev/null )
ifeq (GCC,$(findstring GCC,$(GCC_VER)))
GNU_COMPILER = true
endif

ifdef GNU_COMPILER
ifndef SILENCE_WARNINGS
WARNFLAGS = -Wall \
            -Wtraditional          \
            -Wpointer-arith        \
            -Wcast-qual            \
            -Wstrict-prototypes    \
            -Wmissing-prototypes   \
            -Wmissing-declarations \
            -Woverloaded-virtual   \
            -Winline               \
            -Wno-deprecated        \
            -Wwrite-strings        \
            -Wconversion           \
            -Wshadow               \
            -Wredundant-decls      \
            -Wno-non-template-friend
endif # SILENCE_WARNINGS
ifeq (solaris,$(findstring solaris,$(PLATFORM)))
WARNFLAGS       += -Wno-unknown-pragmas
else   # STL on Solaris with cast-align generates a warning with much output
WARNFLAGS       += -Wcast-align
endif  #End GNU/Solaris
endif  #GNU_COMPILER


#############################
# System Specific Definitions
#############################
TARGETS = $(LIBMC) $(COMMNODE) $(TESTS)
INCDIR = -I$(MRNET_ROOT)/..
LIBMC    =$(LIBDIR)/libmrnet.a
COMMNODE=$(BINDIR)/mrnet_commnode 
TESTS   = $(BINDIR)/test_basic_FE \
          $(BINDIR)/FloatAvg_FE $(BINDIR)/FloatAvg_BE \
          $(BINDIR)/microbench_FE $(BINDIR)/microbench_BE $(BINDIR)/config_generator


###################################
# Object and Executable Definitions
###################################
MC_OBJS = $(LIBMC_OBJS) $(COMMNODE_OBJS)

LIBMC_SRCS = \
             $(MRNET_ROOT)/src/EndPointImpl.C \
             $(MRNET_ROOT)/src/CommunicatorImpl.C \
             $(MRNET_ROOT)/src/StreamImpl.C \
             $(MRNET_ROOT)/src/NetworkImpl.C \
             $(MRNET_ROOT)/src/Network.C \
             $(MRNET_ROOT)/src/StreamManager.C \
             $(MRNET_ROOT)/src/Filter.C \
             $(MRNET_ROOT)/src/Message.C \
             $(MRNET_ROOT)/src/Errors.C \
             $(MRNET_ROOT)/src/NetworkGraph.C \
             $(MRNET_ROOT)/src/CommunicationNode.C \
             $(MRNET_ROOT)/src/RemoteNode.C \
             $(MRNET_ROOT)/src/ParentNode.C \
             $(MRNET_ROOT)/src/FrontEndNode.C \
             $(MRNET_ROOT)/src/ChildNode.C \
             $(MRNET_ROOT)/src/BackEndNode.C \
             $(MRNET_ROOT)/src/InternalNode.C \
             $(MRNET_ROOT)/src/utils.C \
             $(MRNET_ROOT)/src/pthread_sync.C \
             $(MRNET_ROOT)/src/pdr.c \
             $(MRNET_ROOT)/src/pdr_mem.c \
             $(MRNET_ROOT)/src/pdr_sizeof.c \
             $(MRNET_ROOT)/src/byte_order.c \
             $(MRNET_ROOT)/src/scanner.c \
             $(MRNET_ROOT)/src/parser.tab.c

LIBMC_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(LIBMC_SRCS)))))
 
COMMNODE_SRCS = $(MRNET_ROOT)/src/CommunicationNodeMain.C
COMMNODE_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(COMMNODE_SRCS)))))

PDR_SRCS = $(MRNET_ROOT)/src/pdr.c \
            $(MRNET_ROOT)/src/pdr_mem.c \
            $(MRNET_ROOT)/src/pdr_sizeof.c \
            $(MRNET_ROOT)/src/byte_order.c
PDR_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(PDR_SRCS)))))

ALL_SRCS = $(LIBMC_SRCS) $(COMMNODE_SRCS) $(TEST_SRCS)
DEPS	= $(addprefix $(DEPENDDIR)/, $(patsubst %.C,%.d,$(patsubst %.c,%.d,$(notdir $(ALL_SRCS)))))

all: DIRS $(TARGETS)

rebuild:
	make "FRC=force_rebuild"

force_rebuild:

DIRS: $(OBJDIR) $(LIBDIR) $(BINDIR)

$(OBJDIR) $(LIBDIR) $(BINDIR):
	if [ ! -d $@ ] ; then \
	    echo Making directory $@ ... ; \
        { mkdir -p $@ && [ -w $@ ]; } || \
        { echo "$@ not a writable directory" >&2; exit 1;} \
    fi 

$(BINDIR)/mrnet_commnode: $(COMMNODE_OBJS) $(LIBMC)
	echo Linking `basename $@` ...
	$(CXX) $(CXXFLAGS) -o $@  $(COMMNODE_OBJS) $(LIBMC) $(LIBS)

$(LIBMC): $(LIBMC_OBJS)
	echo Archiving `basename $@` ...
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@

$(BINDIR)/test_basic_FE: $(LIBMC) $(OBJDIR)/test_basic_FE.o $(OBJDIR)/test_common.o
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -o $@ $(OBJDIR)/test_basic_FE.o $(OBJDIR)/test_common.o $(LIBMC) $(LIBS)

$(BINDIR)/test1_BE: $(LIBMC) $(OBJDIR)/test1_BE.o
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -o $@ $(OBJDIR)/test1_BE.o $(LIBMC) $(LIBS)

$(BINDIR)/FloatAvg_FE: $(LIBMC) $(OBJDIR)/FloatAvg_FE.o
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -o $@ $(OBJDIR)/FloatAvg_FE.o $(LIBMC) $(LIBS)

$(BINDIR)/FloatAvg_BE: $(LIBMC) $(OBJDIR)/FloatAvg_BE.o
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -o $@ $(OBJDIR)/FloatAvg_BE.o $(LIBMC) $(LIBS)

$(BINDIR)/microbench_FE: $(LIBMC) $(OBJDIR)/microbench_FE.o
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -o $@ $(OBJDIR)/microbench_FE.o $(LIBMC) $(LIBS)

$(BINDIR)/microbench_BE: $(LIBMC) $(OBJDIR)/microbench_BE.o
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -o $@ $(OBJDIR)/microbench_BE.o $(LIBMC) $(LIBS)

$(BINDIR)/config_generator: $(MRNET_ROOT)/tests/config_generator.C
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -o $@ $(MRNET_ROOT)/tests/config_generator.C

$(BINDIR)/pdr_test: $(PDR_OBJS) tests/xdr_test.c
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -Itests -o $@ $(PDR_OBJS) tests/pdr_test.c $(LIBS)

$(BINDIR)/xdr_test: tests/xdr_test.c
	echo "Linking `basename $@` ..."
	$(CXX) $(CXXFLAGS) -Itests -o $@ -DUSE_XDR tests/xdr_test.c $(LIBS)

$(MRNET_ROOT)/src/scanner.c: scanner.l $(MRNET_ROOT)/src/parser.tab.c $(FRC)
	echo Building `basename $@` ...
	$(RM)  $@; $(FLEX) -Pmrn -t $< > $@ 

$(MRNET_ROOT)/src/parser.tab.c: parser.y $(FRC)
	echo Building `basename $@` ...
	$(BISON) -p mrn -d -o $@ $<

parser: src/scanner.c src/parser.tab.c $(LIBMC_OBJS) $(AUX_OBJS) \
        src/Network.o
	echo Building `basename $@`
	$(CXX) $(CXXFLAGS) -o $@ src/scanner.c src/parser.tab.c $(LIBMC_OBJS) $(AUX_OBJS)

#################################
# Defining Cleaning rules
#################################
clean:
	echo Cleaning $(PLATFORM) platform ...
	$(RM) -r $(OBJDIR)/* $(BINDIR)/* $(LIBDIR)/* $(MRNET_ROOT)/src/parser.tab.* \
          $(MRNET_ROOT)/src/scanner.c
	$(RM)  `find $(MRNET_ROOT)/.. -name "*~" -print`

CLEAN:
	echo Cleaning all platforms ...
	$(RM) -r bin lib obj $(MRNET_ROOT)/src/parser.tab.* \
          $(MRNET_ROOT)/src/scanner.c
	$(RM)  `find $(MRNET_ROOT)/.. -name "*~" -print`

distclean: CLEAN
	$(RM)  config.* conf/Makefile*.inc src/config.h ; $(RM) Makefile

files = mrnet/*/*.[C,h,c,y,l] \
        mrnet/src/config.h.in \
        mrnet/configure \
        mrnet/configure.in \
        mrnet/conf/Makefile.generic-arch.in \
        mrnet/conf/Makefile.in \
        mrnet/conf/Makefile.inc.in \
        mrnet/conf/aclocal.m4 \
        mrnet/conf/install-sh \
        mrnet/conf/config.guess \
        mrnet/conf/config.sub \
        mrnet/conf/check_configuration \
        mrnet/conf/check-up \
        mrnet/conf/clean-up \
        mrnet/conf/keystash

BACKUPDIR = /p/paradyn/development/darnold/mrnet-backups
tar:
	echo "Tarring $(files) =>  mrnet.`date +"%d_%b_%H-%M"`.tgz ..."
	cd ..; tar czf mrnet.`date +"%d_%b_%H-%M"`.tgz $(files)

files2 = conf/Makefile.in  \
         $(MRNET_ROOT)/src/CommunicatorImpl.C \
         $(MRNET_ROOT)/src/CommunicatorImpl.h \
         $(MRNET_ROOT)/src/StreamImpl.C \
         $(MRNET_ROOT)/src/StreamImpl.h \
         $(MRNET_ROOT)/src/NetworkImpl.C \
         $(MRNET_ROOT)/src/NetworkImpl.h \
         $(MRNET_ROOT)/src/Network.C \
         $(MRNET_ROOT)/h/Network.h \
         $(MRNET_ROOT)/src/StreamManager.C \
         $(MRNET_ROOT)/src/StreamManager.h \
         $(MRNET_ROOT)/src/Filter.C \
         $(MRNET_ROOT)/src/Filter.h \
         $(MRNET_ROOT)/src/Message.C \
         $(MRNET_ROOT)/src/Message.h \
         $(MRNET_ROOT)/src/NetworkGraph.C \
         $(MRNET_ROOT)/src/NetworkGraph.h \
         $(MRNET_ROOT)/src/CommunicationNode.C \
         $(MRNET_ROOT)/src/CommunicationNode.h \
         $(MRNET_ROOT)/src/CommunicationNodeMain.C

edit:
	echo Editing $(files2) ...
	xemacs $(files2) &

#################################
# Defining Default Build rules
#################################
.SILENT:
.SUFFIXES:
.SUFFIXES: .c .C .o .d

$(OBJDIR)/%.o: %.c $(FRC)
	echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/%.o: %.C $(FRC)
	echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) -o $@ -c $<

#$(OBJDIR)/%.d: %.c $(FRC)
#echo Building Depends File `basename $@` ...
#$(CXX) $(CXXFLAGS) $(DEPENDFLAGS) $< | sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' > $@; \
#	[ -s $@ ] || rm -f $@

#$(OBJDIR)/%.d: %.C $(FRC)
#echo Building Depends File `basename $@` ...
#$(CXX) $(CXXFLAGS) $(DEPENDFLAGS) $< | sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' > $@; \
#	[ -s $@ ] || rm -f $@

$(DEPENDDIR)/%.d: %.c $(FRC)
	echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCDIR) 


$(DEPENDDIR)/%.d: %.C $(FRC)
	echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCDIR) 

-include $(DEPS)
