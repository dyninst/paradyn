<chapter><title>Installing and Using MRNet</title>
<para>
For this discussion, <envar>$MRNET_ROOT</envar> is the location of the
top-level directory of the MRNet distribution and
<envar>$MRNET_ARCH</envar> is a string describing the platform (OS and
architecture) as discovered by autoconf. For the installation instructions, it is
assumed that the current working directory is <envar>$MRNET_ROOT</envar>.
</para>

<sect1><title>Supported Platforms and Compilers</title>
<para>
MRNet has been developed to be highly portable; we expect it to run properly
on all common Unix-based as well as Microsoft Windows platforms. This being said, we have successfully
built and
tested MRNet using <application>GCC version 3.3 compilers</application>
on the following systems:
<itemizedlist>
<listitem>i686-pc-linux-gnu</listitem>
<listitem>ia64-unknown-linux</listitem>
<listitem>rs6000-ibm-aix5.1.0.0</listitem>
<listitem>sparc-sun-solaris2.8</listitem>
<listitem>sparc-sun-solaris2.9</listitem>
<listitem>i386-unknown-nt4.0 (built with MS Visual Studio 6)</listitem>
</itemizedlist>

Our build system attempts to native system compilers where appropriate, for
instance, <application>xlc</application> and <application>xlC</application>
in AIX environments.
</para>

</sect1>

<sect1><title>System Requirements</title>
<para>
Here we list the third party tools that MRNet uses and needs for
proper installation:

<itemizedlist>
<listitem>GNU make</listitem>
<listitem>flex</listitem>
<listitem>bison</listitem>
</itemizedlist>
</para>
</sect1>

<sect1><title>Build Configuration</title>
<para>
MRNet uses <application>GNU autoconf</application> to discover the
platform specific configuration parameters. The script that does
this auto-configuration is called <command>configure</command>.
<screen>
<prompt>UNIX></prompt>  <command>./configure --help</command>
</screen>
shows all possible options of the command. Below, we display the
MRNet-specific ones:

<screen>
<computeroutput>
  --with-libfldir                Directory containing flex library
</computeroutput>
</screen>

<command>./configure</command> without any options should give reasonable
results, but the user may specify certain options. For example,
<screen>
<prompt>UNIX></prompt> <command>./configure CXX=g++ CXXFLAGS=-O3 --with-libfldir=/usr/local/lib</command>
</screen>

instructs the configure script to use <command>g++</command> for the C++
compiler with level 3 optimization, <emphasis>very</emphasis> verbose output
and <filename>/usr/local/lib/libfl.a</filename> as the location of the flex library.
</para>
</sect1>

<sect1><title>Compilation and Installation</title>
<para>
To build the MRNet toolkit by type:
<screen>
<prompt>UNIX></prompt>  <command>make</command>
</screen>
After a successful build, the following files will be present:
<itemizedlist>
<listitem><filename>$MRNET_ROOT/lib/$MRNET_ARCH/libmrnet.a</filename>: MRNet
API library</listitem>
<listitem><filename>$MRNET_ROOT/lib/$MRNET_ARCH/libxplat.a</filename>: A library that exports platform dependent routines to MRNet</listitem>
<listitem><filename>$MRNET_ROOT/bin/$MRNET_ARCH/mrnet_commnode</filename>: MRNet
internal communcation node</listitem>
</itemizedlist>

Typing:
<screen>
<prompt>UNIX></prompt>  <command>make mrnet_tests</command>
</screen>
builds the mrnet test files. In addition to those files above, you will also generate:
<itemizedlist>
<listitem><filename>$MRNET_ROOT/bin/$MRNET_ARCH/mrnet_topgen</filename>: MRNet
topology file generator</listitem>
<listitem><filename>$MRNET_ROOT/bin/$MRNET_ARCH/*_[FE,BE]</filename>: MRNet test front-end and back-end programs</listitem>
<listitem><filename>$MRNET_ROOT/lib/$MRNET_ARCH/test_DynamicFilters.so</filename>: Shared object used in tests of dynamic filter loading.</listitem>
<listitem><filename>$MRNET_ROOT/bin/$MRNET_ARCH/mrnet_tests.sh</filename>: A shell script that runs the test programs and checks for errors in an automated fashion.</listitem>
</itemizedlist>
</para>
</sect1>

<sect1><title>Testing the Code</title>
The shell script, <application>mrnet_tests.sh</application> is placed in the
binary directory with the other executables during the building of the MRNet
tests as described above. This script can be used to run the MRNet test
programs and check their output for errors. The script is used as follows:
<screen>
<prompt>UNIX></prompt> <command>mrnet_tests.sh [ -l | -r &lt;hostfile&gt; | -a &lt;hostfile&gt; | -f &lt;sharedobject&gt;</command>
</screen>
</sect1>
The <option>-l</option> flag is used to run all tests using only topologies that create processes on the local machine. The <option>-r</option> flag runs tests using remote machines specified in the file whose name immediately follows this flag. To run test both locally and remotely, use the <option>-a</option> flag and specify a hostfile to use. To run the programs that test MRNet's ability to dynamically load filters, you must specify the absolute location of the shared object <filename>test_DynamicFilters.so</filename> produced when the tests were built.

<note>To successfully run all tests, the location of the MRNet binaries must be in the user's <envar>$PATH</envar>. For testing dynamic filters, the filesystem containing the shared object must be available to all the host machines participating in the test.</note>

<sect1><title>Bugs, Questions and Comments</title>
<para>
MRNet is maintained primarily by Dorian Arnold, Paradyn Project, University of Wisconsin-Madison.
Comments and other feedback whether positive or negative are welcome.
</para>

<para>
Please report bugs to darnold@cs.wisc.edu.
</para>

<para>
The MRNet webpage is http://www.paradyn.org/mrnet/
</para>
</sect1>

</chapter>
