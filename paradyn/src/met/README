
A simple configuration language.

q0) What is the configuration language?
q1) What files are used?
q2) Where are these files located?
q3) How are the files used?
q4) What can be defined?
q5) What keywords exist in the simple configuration language?
q6) What if I don't want to commit to a specific host?
q7) Where can I get more information?

q0) What is the configuration language?
     A parser has been built into paradyn that searches for 
     configuration files, parses these files, and takes actions
     based on the parsing.

q1) What files are used?
     The metric parser uses a system configuration file, user
     configuration file, and an applicaton configuration file. 
     Paradyn can run without the existence of these files.
     The following information is compiled into paradyn (for the
     time being).

     daemon pvmd { command "paradyndPVM"; }
     daemon cm5d { command "paradynd"; }
     visi HISTOGRAM_REALTIME { command "rthist"; }
     visi TABLE { command "tclVisi"; }

q2) Where are these files located?
     The system configuration file is searched for in 
     $(PARADYN_ROOT)/Paradynrc, and then in $(CWD)/Paradynrc if it
     is not found in the first location.

     The user configuration file is searched for in $HOME/.Paradynrc

     The application configuration file is specified on the command
     line when paradyn is started.  The command line has one option,
     -c <app file>.  So, 'paradyn -c App' would cause paradyn to attempt
     to open the file 'App' in the current working directory and parse
     that file.

q3) How are the files used?
    The system configuration file is read first, followed by the
    user file, and then the application file.   Name equality
    is used to determine when two requests are equal, in which case
    the latest request read will be used.  Each element in the 
    configuration language has a name (which is noted in the language
    element descriptions that follow) that will be used for this
    purpose.  Information on the elements of the language is discussed
    later.  The files are read before the paradyn threads are created, and 
    data from the files may be available to the thread at thread
    initialization time, if it is needed.  Otherwise, after all of the
    threads are created, igen thread calls are made from function 'main'
    to the datamanager thread to define daemons and start processes.
    Calls are also made to the visiualization manager to define 
    visualizations.

q4) What can be defined?
    Comments
    Lists
    tunableConstant settings
    paradyn daemons definitions
    processes to start
    visualization definitions

    A comment on comments
	Consecutive slashes, "//" are used to include comments in the
	configuration file.  The comment is from the "//" to the end
	of the line.

    IDENTIFIER = string, not quote delimited
    LITERAL = quote delimited string
    INT = integer
    FLOAT = floating point number
    BOOLEAN = {TRUE, FALSE}  (case does not matter}

    Lists:
    	list <name> { [<list item>,]* }

	<name>: IDENTIFIER 
        <list item>: LITERAL

	list Practice { "item1", "item2" } 

	Effects:
	    lists currently are of limited use in the configuration language

        Note: the <name> field is used to detect duplicate definitions

    tunableConstant settings:

  	tunable_constant <name> <tunable value>;
	tunable_constant { [<name> <tunable value>;]* }
	    
	<name>: LITERAL
	<tunable value>: FLOAT
	<tunable value>: INT
	<tunable value>: BOOLEAN

	tunable_constant "maxEval" 3;
	tunable_constant {
	    "maxEval" 3;
	    "minObservationTime" 5.1;
	    "pcPrintEval" TruE;
	}

	Note: the name field is used to detect duplicate definitions.
              the name field is also the name by which the paradyn
              knows the tunable constant.


    paradyn daemons: 

	daemon <name> {
	    command <cmd string>;
	    [flavor <flavor type>;]
	    [user <user name>;]
            [dir <directory name>;]
	    [host <host name>;]
 	}

        REQUIRED:
        <name>: IDENTIFIER, the name of the daemon, this allows daemon
		definitions to be looked up and replaced.
	<cmd string>: LITERAL, the command to use to start this paradyn
                      daemon (for exec's)

        OPTIONAL:
	<host name>: IDENTIFIER, no effect now
        <user name>: IDENTIFIER, no effect now
        <directory name>: IDENTIFIER, no effect now
	<flavor type> a keyword that represents the environment type
	   the possible choices are enumerated in the next section 
	   If flavor type is not declared, the default value for cm5
	   is used.

        Effects:
           This enters this data structure into a daemon dictionary
           that the dataManager maintains to match daemon names to
           dictionary entry.  

	Note:
	   the fields in the daemon structure can be declared in any
	   order.  They can also be redeclared within the same structure.
	   The effect of the following is legal but undefined in terms
           of which host name will be used.

	   daemon { 
	       command "paradyndPVM";
	       host "poona";
	       host "cham";
           }

    Processes
	process <name> {
	    command <command string>;
	    daemon <daemon string>;
	    [host <host string>;]
	    [user <user name>;]
            [dir <directory name>;]
	}

        REQUIRED:
        <name>: IDENTIFIER, the name of the process
	<command string>: LITERAL, the command to use to start this paradyn
                          daemon (for exec's)
        <daemon string>: IDENTIFIER, the name of the daemon used to get 
                         the data needed to start the daemon from the
                         daemon dictionary

        OPTIONAL:
        <user name>: IDENTIFIER, no effect now
        <directory name>: IDENTIFIER, no effect now
        <host string>: IDENTIFIER, the name of the host on which the process
                       should be started.  If this field is not specified, the
                       process is started on the local machine.

	process default {
	    command "potato";
	    daemon "paradyndPVM";
 	}


	Effects:
	    a process is started using <command string> on the local host
		under the control of daemon <daemon string>.  <daemon string>
                is used to get an entry from the daemon dictionary. 

	Note:
	   the fields in the process structure can be declared in any
	   order.  They can also be redeclared within the same structure.
	   See the discussion on daemons for an elaboration of this.
 

    Visualizations
	visi <name> {
	    command <command string>;
            [user <user string>;]
            [host <host string>;]
            [dir <directory>;]
	    [force <int >;]
	}

        REQUIRED:
        <name>: IDENTIFIER, used to replace visi definitions.  This
                string is displayed by the user interface.
	<command string>: IDENTIFIER

        OPTIONAL:
        <user string>: IDENTIFIER, not used now
        <host string>: IDENTIFIER, determines where the visi is started
                       no entry implies the local host
        <directory>:   IDENTIFIER, not used now
	<force>:  int, if 1 then the visi will be started without menuing
		  first, otherwise met/focus menuing will occur first

	Effects:
	    a visualization named <name> is made available to
	    paradyn.  The visualization is started with the command
	    <command string>, which may include arguments.

q5) What keywords exist?

    // - a comment 
    visi
    list
    daemon
    process
    name 
    host
    flavor
    command
    dir
    user
    tunable_constant
    flavor - one of {pvm, cm5}
    pvm -  a flavor
    cm5 - a flavor

q6) Any 'host' field that is not specified implies that the local
    host should be used.

q7) More info?  See metParser.y for the grammar.
