# 
# Common makefile template for paradynd.  This file is not intended to
# be a useful Makefile in isolation; instead, it should be included
# from within an architecture-specific Makefile.
#
# $Id: make.module.tmpl,v 1.90 2006/01/16 17:50:18 legendre Exp $
#

CFLAGS		     += $(TCLFRIENDLYWARNINGS) -DNEW_TIME_TYPES
CXXFLAGS	     += $(TCLFRIENDLYWARNINGS) -DNEW_TIME_TYPES
TFLAGS		     += $(TCLFRIENDLYWARNINGS) -DNEW_TIME_TYPES

#TEMPORARY, FOR DEBUGGING....
#CXXFLAGS	+= -DDEBUG_CALL_POINTS

TARGET	      = paradynd


IFILE	+=-I../mrnet/mrnet/h/mrnet -I../mrnet/mrnet
IFILE	+=-I../../mrnet/mrnet/h/mrnet -I../../mrnet/mrnet

VPATH	     += ../../paradynd/src:../../paradyn/h:../../dyninstAPI/src:\
		../../dyninstAPI/h

SRCS        += ../../dyninstAPI/src/ast.C \
		../src/comm.C \
		../src/context.C \
		../src/dynrpc.C \
    	../src/init.C \
      ../../dyninstAPI/src/arch.C \
		../../dyninstAPI/src/inst.C \
		../../dyninstAPI/src/instPoint.C \
		../../dyninstAPI/src/baseTramp.C \
      ../../dyninstAPI/src/multiTramp.C \
		../../dyninstAPI/src/miniTramp.C \
		../../dyninstAPI/src/codeRange.C \
		../src/main.C \
		../src/metricFocusNode.C \
		../src/machineMetFocusNode.C \
		../src/processMetFocusNode.C \
		../src/threadMetFocusNode.C \
		../src/instrCodeNode.C \
		../src/instrDataNode.C \
		../src/instReqNode.C \
		../src/internalMetrics.C \
		../src/costmetrics.C \
      ../../dyninstAPI/src/api_showerror.C \
		../../dyninstAPI/src/BPatch.C \
		../../dyninstAPI/src/BPatch_type.C \
		../../dyninstAPI/src/BPatch_thread.C \
		../../dyninstAPI/src/BPatch_process.C \
		../../dyninstAPI/src/BPatch_snippet.C \
		../../dyninstAPI/src/BPatch_function.C \
		../../dyninstAPI/src/BPatch_point.C \
		../../dyninstAPI/src/BPatch_image.C \
		../../dyninstAPI/src/BPatch_module.C \
		../../dyninstAPI/src/BPatch_collections.C \
		../../dyninstAPI/src/BPatch_sourceBlock.C \
		../../dyninstAPI/src/BPatch_basicBlock.C \
		../../dyninstAPI/src/BPatch_basicBlockLoop.C \
		../../dyninstAPI/src/BPatch_edge.C \
		../../dyninstAPI/src/BPatch_loopTreeNode.C \
		../../dyninstAPI/src/BPatch_flowGraph.C \
		../../dyninstAPI/src/BPatch_asyncEventHandler.C \
		../../dyninstAPI/src/BPatch_eventLock.C \
		../../dyninstAPI/src/BPatch_frame.C \
		../../dyninstAPI/src/Object.C \
		../../dyninstAPI/src/MemoryAccess.C \
		../../dyninstAPI/src/BPatch_instruction.C \
		../src/perfStream-def.C \
		../src/perfStream.C \
		../../dyninstAPI/src/process.C \
      ../../dyninstAPI/src/bitArray.C \
		../../dyninstAPI/src/frame.C \
		../../dyninstAPI/src/dyn_lwp.C \
		../../dyninstAPI/src/dyn_thread.C \
		../../dyninstAPI/src/signalhandler.C \
		../../dyninstAPI/src/rpcMgr.C \
		../../dyninstAPI/src/rpcMgr-thr.C \
		../../dyninstAPI/src/rpcMgr-lwp.C \
		../src/resource.C \
		../../dyninstAPI/src/stats.C \
		../../dyninstAPI/src/symtab.C \
		../../dyninstAPI/src/function.C \
		../../dyninstAPI/src/dominator.C \
      ../../dyninstAPI/src/image-flowGraph.C \
      ../../dyninstAPI/src/reloc-func.C \
      ../../dyninstAPI/src/image-func.C \
      ../../dyninstAPI/src/mapped_object.C \
      ../../dyninstAPI/src/mapped_module.C \
      ../../dyninstAPI/src/variable.C \
		../../dyninstAPI/src/util.C \
      ../../dyninstAPI/src/InstrucIter-xplat.C \
		../../dyninstAPI/src/LineInformation.C \
		../../dyninstAPI/src/EventHandler.C \
		../../dyninstAPI/src/callbacks.C \
		../../dyninstAPI/src/mailbox.C \
 		../src/mdl.C \
 		../src/mdld_data.C \
 		../src/focus.C \
		../src/showerror.C \
		../../dyninstAPI/src/BPatch_templates.C \
		../../dyninstAPI/src/templates0.C \
		../../dyninstAPI/src/templates1.C \
		../../dyninstAPI/src/templates2.C \
		../src/templatesPD.C \
		../src/templatesIGEN.C \
		../src/papiMgr.C \
		../src/processMgr.C \
		../src/pd_process.C \
		../src/pd_image.C \
		../src/pd_module.C \
		../src/threadMgr.C \
		../src/pd_thread.C \
		../src/debug.C

ifdef USES_SHM_SAMPLING
SRCS 		+= ../src/varInstanceHKs.C ../src/varInstance.C \
		   ../src/shmMgr.C  \
		   ../src/variableMgr.C \
		   ../src/shmSegment-unix.C \
		   ../src/shmSegment.C \
		   ../src/sharedMetaData.C

CXXFLAGS	+= -DSHM_SAMPLING
TFLAGS		+= -DSHM_SAMPLING
CFLAGS		+= -DSHM_SAMPLING
endif

IGEN_GEN_SRCS = dyninstRPC.mrnet.SRVR.C \
		dyninstRPC.mrnet.temp.C



#		dyninstRPC.xdr.SRVR.C \
#		dyninstRPC.xdr.CLNT.C \
#		dyninstRPC.xdr.C \


IGEN_ISRCS    = dyninstRPC.I
PREREQUISITES = $(IGEN_GEN_SRCS)


LIBS		+= -lpdutil
LIBS 		+= -lmrnet -lxplat -lpthread

ifdef CROSSCOMPILER
SYSLIBS		+= -liberty -lg++ -lstdc++ -lm
else
SYSLIBS         += -liberty
endif

IFLAGS       += -I../$(PLATFORM) -I../src -I../../dyninstAPI/h -I../../mrnet/mrnet/h

all:    $(TARGET)

# I couldn't figure out how to explicitly instantiate a templated
# function whose template arguments are protected members of
# LineInformation, but apparently the compiler can.  Since the
# function is only used internally by LineInformation, the
# templates won't be duplicated.
LineInformation.o : ../../dyninstAPI/src/LineInformation.C
	$(CXX) $(TFLAGS) -c $<

templates0.o: ../../dyninstAPI/src/templates0.C
	$(CXX) $(TFLAGS) -c ../../dyninstAPI/src/templates0.C

templates1.o: ../../dyninstAPI/src/templates1.C
	$(CXX) $(TFLAGS) -c ../../dyninstAPI/src/templates1.C

templates2.o: ../../dyninstAPI/src/templates2.C
	$(CXX) $(TFLAGS) -c ../../dyninstAPI/src/templates2.C

templatesPD.o: ../src/templatesPD.C
	$(CXX) $(TFLAGS) -c ../src/templatesPD.C

templatesIGEN.o: ../src/templatesIGEN.C
	$(CXX) $(TFLAGS) -c ../src/templatesIGEN.C
