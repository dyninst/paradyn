
gentpc - generate thread procedure calls.

This program automates the process of creating remote interfaces.
Interfaces are like remote porcedure calls, but the end points
can be threads or processes.

Input:
    A file containing igen protoypes (which are a superset of C++ prototypes).


Output:
    A header file containing protoypes for the interface.

    1-3 three C++ source files.

    If the interface is thread based, one file is generated.

    If the interface is xdr based, three files are generated.  
	<inputFileRoot>.C	- xdr bundlers for the types that can be passed.
	<inputFileRoot>.CLNT.C	- Client side code for users of the interface.
	<inputFileRoot>.SRVR.C	- Server code for providers of the interface.
     

An interface looks like:

$remote <interfaceName> {
    $base <int>;
    $version <int>;
    <member function definitions>
    $upcall [$async] <member function definitions>
}

The $base keyowrd defines the first message tag to use for creating request 
and responce message types.  Since TAGS should be unique to an application, 
this value should not confilct with other interfaces that might get linked 
into the same process.

The integer after the keyword $version indicates the protocol version of this
interface.  For XDR based protocols this version is verified when the client
and server rendevue.  For thread based interfaces, igen relies on the fact that
changes to an inteface generally change the signature of at least one function
in the interface, and that version imcompatabilities should be resolved by
the C++ linker in that case.

The member functions are the basis of the interface.  A provider of an interface
defines the member functions in the class <interfaceName>.  Igen generates
a shadow class <interfaceName>User with the same member functions.  The
<interfaceName>User member functions are really RPC style stubs that
invoke the remote member functions.

The $upcall keyword permits interfaces to support upcalls.  Upcalls are a way
for an interface to indicate to its user that an "intersting" event has
occured.  Upcalls are by default syncchronous, but can be made asynchronous
by adding the keyword $async after the keyword $upcall.


