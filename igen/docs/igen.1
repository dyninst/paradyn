.\" $Log: igen.1,v $
.\" Revision 1.3  1994/07/07 23:32:40  markc
.\" Removed old comments.
.\"
.TH IGEN 1L PARADYN "6 July 1994"
.SH NAME
igen \- RPC Interface Generator
.SH SYNOPSIS
.B
igen \-xdr | \-thread | \-pvm [\-header | \-code] <input root>.I 

.SH DESCRIPTION
.PP
This program automates the process of creating remote procedure call 
interfaces.  The client and server of the interface can be processes or
threads.
.SH OPTIONS
.TP 8
.B \-xdr
This option specifies that \fBigen\fP should use XDR as the transport
mechanism.
.TP 8
.B \-thread
This option specifies that \fBigen\fP should use threads messages as
the transport mechanism.
.TP 8
.B \-pvm
This option specifies that \fBigen\fP should use pvm as the the
transport mechanism.
.TP 8
.B\-code
This option specifies that \fBigen\fP should only generate the source files.
.TP 8
.B\-header
This option specifies that \fBigen\fP should only generate the header files.
.TP 8
.B <input root>.I
This file specifies the interface template to use to generate the source and
header files.  All files will use <input root> in their name.  

.SH "OUTPUT"
.PP
\fBigen\fP produces the following output files:
.TP 8
.B Source Files
One file is generated if the interface is thread based, <input root>.C

Three files are generated if the interface is xdr/pvm based:

<input root>.C	- xdr/pvm bundlers for the types that can be passed.

<input root>.CLNT.C	- Client side code for users of the interface.

<input root>.SRVR.C	- Server code for providers of the interface.
.TP 8
.B Header Files
The header files are:

        <input root>.h

        <input root>.CLNT.h - client class

        <input root>.SRVR.h - server class.
.TP 8
.B Note:
The member functions declared in <input root>.SRVR.h are not generated by
igen, except for the class constructor and mainLoop.  These functions are
called by the server when it receives a request from the client. These
functions must be provided by the programmer.

.SH "MEMORY"
.PP

igen frees all memory that it allocates, with one exception.  Return types in
the client code may be a structure or an array class.  The memory allocated
for these return types will not be deallocated by igen.  

.SH "UPCALLS"
.PP

Upcalls from the server to the client are supported.  However, the upcalls
will only be seen when the client is waiting for a response from a synchronous
call to the server.  There is a way to force the client to attempt to handle
an upcall.  The client has a member function awaitResponce which will handle
any upcall requests that exist, but awaitResponce will block.  The file descriptor should be checked to see if it is ready for reading before calling
awaitResponce.

.SH "INTERFACE TEMPLATE"
.PP
An interface looks like:

$remote <interfaceName> {
    $base <int>;
    $version <int>;
    $virtual [$async | $array] <member function definitions>
    $virtual $upcall [$async] <member function definitions>
    $cmember type variable;
    $smember type variable;
}

The $array keyword causes igen to genarate an array class and use this as
the array type.  The class has a member specifying the size of the array
and a pointer to the data.

The $virtual keyword causes the igen generated functions to be declared virtual.  For upcalls, the client function is declared virtual.  For non-upcalls, the server function is declared virtual.

The $smember and $cmember keywords cause igen to put the type and variable declaration into the client or server class.  $smember specifies that the server class is to include the type and variable as a public data member.  $cmember specifies that the client class is to include the type and variable as a public data member.

The $base keyword defines the first message tag to use for creating request 
and responce message types.  Since TAGS should be unique to an application, 
this value should not confilct with other interfaces that might get linked 
into the same process.

The integer after the keyword $version indicates the protocol version of this
interface.  For XDR based protocols this version is verified when the client
and server rendevous.  For thread based interfaces, igen relies on the fact that
changes to an interface generally change the signature of at least one function
in the interface, and that version imcompatabilities should be resolved by
the C++ linker in that case.

The member functions are the basis of the interface.  A provider of an interface
defines the member functions in the class <interfaceName>.  Igen generates
a shadow class <interfaceName>User with the same member functions.  The
<interfaceName>User member functions are really RPC style stubs that
invoke the remote member functions.

The $upcall keyword permits interfaces to support upcalls.  Upcalls are a way
for an interface to indicate to its user that an "interesting" event has
occured.  Upcalls are by default synchronous, but can be made asynchronous
by adding the keyword $async after the keyword $upcall.

The $async keyword placed before a function definition prevents igen from generating
a wait for reply after make the remote procedure call.  No reply will be made by
the receiver of the remote procedure call.

.SH "EXAMPLE"
.PP
An example interface is:

#define PASS_THRU "this hash-define gets passed through"

/* a struct with one int */
.br
$remote typedef struct { 
.br
    int style;
.br
} intStruct;		

$remote typedef struct {
.br
    int computer;
.br
    int science;
.br
} mStruct;

/*
.br
 *
.br
 */
.br
$remote test {
.br
    $base 2000;
.br
    $version 1;
.br
    void nullNull();				// a comment
.br
    int intNull();
.br
    $async void nullStruct(intStruct);
.br
    int intString(String);
.br
    int add(int, int);
.br
    int sumVector($array int);
.br
    $array int retVector(int len, int start);
.br
    String stringString(String);
.br
    void triggerSyncUpcall(int val);
.br
    $upcall void syncUpcall(int x);
.br
    // this function will be virtual in the server class
.br
    $virtual void triggerAsyncUpcall(int val);
.br
    // this function will be virtual in the client class
.br
    $virtual $upcall $async void asyncUpcall(int x);
.br
    // int happy; will be a public data member in the client
.br
    $cmember int happy;
.br
    // int sad; will be a public data member in the server
.br
    $smember int sad;
.br
};

.SH "SEE ALSO"
Paradyn(1).
.SH COPYRIGHT
Copyright 1994, The Paradyn Software Team.
.SH AUTHOR
Jeff Hollingsworth (hollings@cs.wisc.edu)
.br
Mark Callaghan     (markc@cs.wisc.edu)



