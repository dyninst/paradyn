
This directory contains tests for the dyninstAPI library.

To build the test programs, cd into the subdirectory of this directory that
is named after the platform you are running on, and type "make."  If you are
using the source distribution of the Dyninst API, you will need to make the
API libraries before making the tests; see the README file in the
core/dyninstAPI directory for how to do this.

On the Sparc Solaris and Windows NT platforms, before you can run the test
programs you will need to set up your environment so that the API can find
the run-time instrumentation library that it will load into the mutatee
process.  

On the Sparc Solaris platform, this is done by setting the DYNINSTAPI_RT_LIB
environment variable to the full pathname of the file libdyninstAPI_RT.so.1.
If you have correctly set the DYNINST_ROOT and PLATFORM environment
variables as described in the README file in the "core" directory, then the
proper pathname is:

    $DYNINST_ROOT/lib/$PLATFORM/libdyninstAPI_RT.so.1

On Windows NT, you should put the directory %DYNINST_ROOT%/lib/%PLATFORM%
in your path.

To run the tests, type "test1" or "test2" in the subdirectory of this
directory named after the platform you are using.  Each test program starts
a mutatee process, test1.mutatee or test2.mutatee, the executable for which
must be in the current directory.  For both programs, you should see a
series of messages saying that each test was passed.

The programs take two options:
    -verbose	Print extra output.
    -attach	Start the mutatee without using the library and then
		attach to it.  This option is only supported on Solaris
		and Windows NT.

It is normal to see the messages "WARNING: register _n_ is still in use" and
"attempt to ptrace exited process," as well as the message "Process _n_ has
terminated" when test1.mutatee exits.

The test2 program tests to see that various error conditions are caught
and reported properly by the library, so it is normal for it to print some
warning and error messages.  If all tests pass, it will print a message
saying so, so you may assume any error messages printed were expected.
