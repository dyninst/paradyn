# Paradyn overall build configuration (Windows/NT)
#
# $Id: nmake.config,v 1.11 1998/05/06 01:18:45 wylie Exp $
#

SUITE_NAME	= Paradyn
RELEASE_NUM	= 2.1
#BUILD_MARK	=

# Apart from actual "full" releases, don't modify these build Id components.
# For personal/experimental builds, feel free to use your core/make.config.local
# file to (re-)define BUILD_MARK as you desire.

# ***** IMPORTANT INSTALLATION/CONFIGURATION INSTRUCTIONS *****
# Unless your site is set-up identically to that of the Paradyn/DynInstAPI
# developers, you should carefully examine the (GNU)make configuration
# parameters defined in this file, particularly utilities such as the C/C++
# compilers, perl, flex and bison, and the installed locations and names
# for FLEX and RPCPKG.
# (perl, TCL/TK, X11 and PVM are currently not required for WindowsNT).

# uncomment/comment the following line to build with/without PVM support
#INCLUDE_PVM_SUPPORT=true

# most "main" modules are only two levels deep, but we need to be able to
# change this for those that are deeper in the tree
!ifndef TO_CORE
TO_CORE         = ..\..
!endif

# Destinations for library and executable installation (relative to core!)
# Warning: modification of the build/install structure is not recommended!
LIBRARY_DEST  = ..\lib\$(PLATFORM)
PROGRAM_DEST  = ..\bin\$(PLATFORM)

# Usually, we look for files, binaries, libs in $(TO_CORE)/....<something>.
# But if the file doesn't exist there (i.e. if the user hasn't checked them out
# with cvs), then we should look in a backup location.  That's what this vrble
# is about.  It's used several times below in this file.
BACKUP_CORE = p:\paradyn\core

AR		= ar
AS		=
CC		= cl -nologo
CXX		= cl -nologo
LEX		= p:\paradyn\packages\winnt\bin\flex
FLEX_LIB	= p:\paradyn\packages\winnt\lib\libfl.lib
#TCLTK_DIR	= p:\paradyn\packages\winnt\tcl8.0
RANLIB		=
RPCPKG		= p:\paradyn\packages\winnt\oncrpc
#X11DIR		= 
YACC		= p:\paradyn\packages\winnt\bin\bison
YFLAGS		= -d -y
#LDFLAGS	= -link

!ifdef SHELL    # use richer Unix shell utilities when they're available!
CP		= cp
MV		= mv
RM		= rm -f
MKDIR		= mkdir
BUILDSTAMP	= sh $(TO_CORE)/../scripts/buildstamp  # generate build vouchers
!else           # try and work as much as possible with "vanilla" WinNT!
CP		= copy
MV		= move
RM		= del
MKDIR		= md
BUILDSTAMP	= cmd /c $(TO_CORE)/../scripts/buildstamp.bat
!endif

# COLLECTOR is only used by purify & quantify
#COLLECTOR	=

ARCH_DEF	= -Di386_unknown_nt4_0

# Default module compiler; modules which want $(CC) should redefine
# this, **NOT** CC

MODCC           = $(CXX)
MODCFLAGS       = $(CXXFLAGS)

#.SUFFIXES:      .I

VPATH         = ..\src:$(TO_CORE)\$(LIBRARY_DEST):$(TO_CORE)\..\lib\$(PLATFORM):$(BACKUP_CORE)\..\lib\$(PLATFORM)

IFLAGS          = -I. -I$(TO_CORE) -I$(RPCPKG)

#ASFLAGS         = -P $(ARCH_DEF)

#don't inline -- for the files that won't emit template code
INLINE_DEFINES = 

#inline the private members of the class -- templates.o can use this
TEMP_INLINE_DEFINES = -DDO_INLINE_P="inline"

# inline everything -- the way things should be
ALL_INLINE_DEFINES = -DDO_INLINE_F="inline" -DDO_INLINE_P="inline"

# if we don't want OPT_FLAG defined for a particular part of the code
# (e.g. rtinst for aix), we just need to define NO_OPT_FLAG before doing
# the include of make.config - naim
!ifndef NO_OPT_FLAG
OPT_FLAG	= -Ox
!endif

DEFCFLAGS	= -Z7 -W3

CFLAGS          = $(DEFCFLAGS) $(OPT_FLAG) $(IFLAGS) $(ARCH_DEF)

CXXFLAGS	= $(DEFCFLAGS) $(OPT_FLAG) -DCRTAPI1=_cdecl -DCRTAPI2=_cdecl \
                                -TP -DWIN32 $(IFLAGS) $(ARCH_DEF)
 
# flags for kludge files, won't have warnings generated
KFLAGS          = $(IFLAGS) $(ARCH_DEF)

# flags for template files, don't define external template flags
# -g is optional in this case -- should be defined at module level
TFLAGS          = $(IFLAGS) $(OPT_FLAG) $(TEMP_INLINE_DEFINES) $(ARCH_DEF)

!ifdef DO_INLINE_ALL
CXXFLAGS        = $(CXXFLAGS) -DDO_INLINE_F="inline" -DDO_INLINE_P="inline"
!endif

# Start off LIBDIR to point to the user's devel area's paradyn lib directory.
# As a backup, in case the user hasn't checked out & compiled some paradyn lib,
# we stick in /p/paradyn/lib _second_.
LIBDIR          = -LIBPATH:$(TO_CORE)\$(LIBRARY_DEST) \
                        -LIBPATH:$(TO_CORE)\..\lib\$(PLATFORM) \
			-LIBPATH:$(BACKUP_CORE)\..\lib\$(PLATFORM) \
			-LIBPATH:$(RPCPKG)\lib

# Set IGEN to point to $(TO_CORE)/../bin/$(PLATFORM)/igen, if it exists,
# else set it to $(BACKUP_CORE)/../bin/$(PLATFORM)/igen, if it exists,
# else set it to just "igen" (i.e. assume it's in the user's path)
IGEN = $(TO_CORE)\igen\$(PLATFORM) 

!ifdef NO_IMPLICIT_TEMPLATES
#CFLAGS          += -fno-implicit-templates
#CXXFLAGS        += -fno-implicit-templates
#KFLAGS          += -fno-implicit-templates
#TFLAGS          += -fno-implicit-templates
!endif

!ifndef INSTANTIATE_TEMPLATES
!ifndef NO_IMPLICIT_TEMPLATES
# -fexternal-templates and -Dexternal_templates should both be used or
# neither should be used; add them to CFLAGS, CXXFLAGS, and KFLAGS
# (but not to TFLAGS).
#
#CFLAGS          = $(CFLAGS) -fexternal-templates -Dexternal_templates
#CXXFLAGS        = $(CXXFLAGS) -fexternal-templates -Dexternal_templates
#KFLAGS          = $(KFLAGS) -fexternal-templates -Dexternal_templates
!endif
!endif

# ***** EXTERNAL SOFTWARE CONFIGURATION *****

!ifdef INCLUDE_PVM_SUPPORT
!ifdef USES_PVM
!ifndef PVM_ROOT
BUILDERROR: PVM_ROOT must be defined in environment to build (and run) Paradyn
!endif
!ifndef PVM_ARCH
BUILDERROR: PVM_ROOT must be defined in environment to build (and run) Paradyn
!endif
PVM_INCDIR	= $(PVM_ROOT)/include
PVM_LIBDIR	= $(PVM_ROOT)/lib/$(PVM_ARCH)
IFLAGS		= $(IFLAGS) -I$(PVM_INCDIR)
#LIBDIR		+= $(patsubst %,-L%,$(PVM_LIBDIR))
#VPATH		+= $(PVM_LIBDIR)
!endif
!endif

!ifdef USES_TCLTK
# Set TCL2C to $(TO_CORE)/tclStuff/tcl2c, if it exists, else
# set it to $(BACKUP_CORE)/tclStuff/tcl2c, if it exists, else
# set it to just tcl2c (i.e. assume it's in the user's shell path)
TCL2C           = $(shell if [ -f $(TO_CORE)/tclStuff/tcl2c ]; then echo $(TO_CORE)/tclStuff/tcl2c; else if [ -f $(BACKUP_CORE)/tclStuff/tcl2c ]; then echo $(BACKUP_CORE)/tclStuff/tcl2c; else echo tcl2c; fi; fi )
TCL2C_GEN_SRCS  = tcl2c.C

# Set TCLTK_INCLUDES to $(TO_CORE)/tclStuff/include, if it exists,
# else set it to $(BACKUP_CORE)/tclStuff/include.
TCLTK_INCLUDES  = $(shell if [ -d $(TO_CORE)/tclStuff/include ]; then echo $(TO_CORE)/tclStuff/include; else echo $(BACKUP_CORE)/tclStuff/include; fi )

IFLAGS          += $(patsubst %,-I%,$(TCLTK_INCLUDES))
LIBDIR          += $(patsubst %,-L%/lib,$(TCLTK_LIBPATH))
!endif /* USES_TCLTK */

#ifdef USES_LIBERTY
# Since libiberty.a is in the same g++ directory as libstdc++.a and
# libg++.a, no need for a "-L$(LIBERTY_DIR)" entry -at
#endif

#ifdef USES_X11
#ifeq ($(PLATFORM),i386-unknown-solaris2.5)
#CFLAGS          += -I$(X11DIR)/include
#CXXFLAGS        += -I$(X11DIR)/include
#TFLAGS          += -I$(X11DIR)/include
#LIBDIR          += -R$(X11DIR)/lib -L$(X11DIR)/lib
#VPATH           += $(X11DIR)/lib
#endif
#endif /* USES_X11 */


# Include any per-user configuration changes; this "local" config file
# should *not* be under CVS control, so that it never gets committed.

!if exist ($(TO_CORE)\nmake.config.local)
!include $(TO_CORE)\nmake.config.local
!else # try the common one
!if exist ($(TO_CORE)\make.config.local)
!include $(TO_CORE)\make.config.local
!endif
!endif
