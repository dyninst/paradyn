# Paradyn overall build configuration (Windows/NT)
#
# $Id: nmake.config,v 1.54 2003/07/18 15:43:18 schendel Exp $
#

SUITE_NAME	= Paradyn
RELEASE_NUM	= 4.0
#BUILD_MARK	=

# Apart from actual "full" releases, don't modify these build Id components.
# For personal/experimental builds, feel free to use your core/make.config.local
# file to (re-)define BUILD_MARK as you desire.

# ***** IMPORTANT INSTALLATION/CONFIGURATION INSTRUCTIONS *****
# Unless your site is set-up identically to that of the Paradyn/DyninstAPI
# developers, you should carefully examine the (GNU)make configuration
# parameters defined in this file, particularly utilities such as the C/C++
# compilers, perl, flex and bison, and the installed locations and names
# for FLEX and RPCPKG.

!ifdef USES_PVM
# (PVM support only potentially relevant for paradynd)
# uncomment/comment the following line to build with/without PVM support
#INCLUDE_PVM_SUPPORT=true
!endif

# most "main" modules are only two levels deep, but we need to be able to
# change this for those that are deeper in the tree
!ifndef TO_CORE
TO_CORE         = ..\..
!endif

# Destinations for library and executable installation (relative to core!)
# Warning: modification of the build/install structure is not recommended!
LIBRARY_DEST  = ..\lib\$(PLATFORM)
PROGRAM_DEST  = ..\bin\$(PLATFORM)

# Usually, we look for files, binaries, libs in $(TO_CORE)/....<something>.
# But if the file doesn't exist there (i.e. if the user hasn't checked them out
# with cvs), then we should look in a backup location.  That's what this vrble
# is about.  It's used several times below in this file.
BACKUP_CORE = p:\paradyn\core

AR		= ar
AS		=
NASM		= nasmw
CC		= cl -nologo
CXX		= cl -nologo
LINK		= link
RANLIB		=
RPCPKG		= p:\paradyn\packages\winnt\oncrpc
#RPCPKG		= f:\oncrpc
RPC_LIB		= oncrpc.lib
#X11DIR		=
YACC		= bison
YFLAGS		= -d -y
LDFLAGS		= -nologo

PERL		= perl		# NB: perl v5 or higher required!

!ifdef USES_FLEX
LEX			= flex
FLEX_LIB	= libfl.a
LDFLAGS		= $(LDFLAGS) -LIBPATH:c:\cygwin\lib
!endif

!ifdef SHELL    # use richer Unix shell utilities when they're available!
CP		= cp
MV		= mv
RM		= rm -f
MKDIR		= mkdir
BUILDSTAMP	= sh $(TO_CORE)/../scripts/buildstamp  # generate build vouchers
!else           # try and work as much as possible with "vanilla" WinNT!
CP		= copy
MV		= move
RM		= del
MKDIR		= md
BUILDSTAMP	= cmd /c $(TO_CORE)\..\scripts\buildstamp.bat
!endif

# COLLECTOR is only used by purify & quantify
#COLLECTOR	=

ARCH_DEF	= -Di386_unknown_nt4_0

# Default module compiler; modules which want $(CC) should redefine
# this, **NOT** CC

MODCC           = $(CXX)
MODCFLAGS       = $(CXXFLAGS)

.SUFFIXES:      .I .y .l

VPATH         = ..\src:$(TO_CORE)\$(LIBRARY_DEST):$(TO_CORE)\..\lib\$(PLATFORM):$(BACKUP_CORE)\..\lib\$(PLATFORM)

IFLAGS          = -I. -I$(TO_CORE) -I$(RPCPKG)

#ASFLAGS         = -P $(ARCH_DEF)

#don't inline -- for the files that won't emit template code
INLINE_DEFINES =

#inline the private members of the class -- templates.o can use this
TEMP_INLINE_DEFINES = -DDO_INLINE_P="inline"

# inline everything -- the way things should be
ALL_INLINE_DEFINES = -DDO_INLINE_F="inline" -DDO_INLINE_P="inline"

# NO_OPT_FLAG = 1
# if we don't want OPT_FLAG defined for a particular part of the code
# (e.g. rtinst for aix), we just need to define NO_OPT_FLAG before doing
# the include of make.config - naim
!ifndef NO_OPT_FLAG
OPT_FLAG	= -Ox
!endif

DEFCFLAGS	= -Zi -W3 -GR -GX -DNOMINMAX /wd4995

CFLAGS          = $(DEFCFLAGS) $(OPT_FLAG) $(IFLAGS) \
			$(ARCH_DEF) -D_WIN32_WINNT=0x0500 # ccw 20 june 2001 was 0x0400

CXXFLAGS	= $(DEFCFLAGS) $(OPT_FLAG) $(IFLAGS) \
			$(ARCH_DEF) /Zm1234 -TP -DWIN32 -D_WIN32_WINNT=0x0500 # ccw 20 june 2001 was 0x0400 #JAW-0303 /Zm1234 increases compilation memory

# flags for kludge files, won't have warnings generated
KFLAGS          = $(IFLAGS) $(ARCH_DEF)

# flags for template files, don't define external template flags
# -g is optional in this case -- should be defined at module level
TFLAGS          = $(IFLAGS) $(OPT_FLAG) $(TEMP_INLINE_DEFINES) $(ARCH_DEF)

!ifdef DO_INLINE_ALL
CXXFLAGS        = $(CXXFLAGS) -DDO_INLINE_F="inline" -DDO_INLINE_P="inline"
!endif

# Start off LIBDIR to point to the user's devel area's paradyn lib directory.
# As a backup, in case the user hasn't checked out & compiled some paradyn lib,
# we stick in /p/paradyn/lib _second_.
LIBDIR          = -LIBPATH:$(TO_CORE)\$(LIBRARY_DEST) \
                        -LIBPATH:$(TO_CORE)\..\lib\$(PLATFORM) \
			-LIBPATH:$(BACKUP_CORE)\..\lib\$(PLATFORM) \
			-LIBPATH:$(RPCPKG)\lib

#USE OLD LINE INFORMATION FOR THE TIME BEING
CFLAGS      = $(CFLAGS) -DOLD_LINE_INFO
CXXFLAGS    = $(CXXFLAGS) -DOLD_LINE_INFO
TFLAGS      = $(TFLAGS) -DOLD_LINE_INFO

# Set IGEN to point to $(TO_CORE)/../bin/$(PLATFORM)/igen, if it exists,
# else set it to $(BACKUP_CORE)/../bin/$(PLATFORM)/igen, if it exists,
# else set it to just "igen" (i.e. assume it's in the user's path)
IGEN = $(TO_CORE)\igen\$(PLATFORM)

!ifdef NO_IMPLICIT_TEMPLATES
#CFLAGS          += -fno-implicit-templates
#CXXFLAGS        += -fno-implicit-templates
#KFLAGS          += -fno-implicit-templates
#TFLAGS          += -fno-implicit-templates
!endif

!ifndef INSTANTIATE_TEMPLATES
!ifndef NO_IMPLICIT_TEMPLATES
# -fexternal-templates and -Dexternal_templates should both be used or
# neither should be used; add them to CFLAGS, CXXFLAGS, and KFLAGS
# (but not to TFLAGS).
#
#CFLAGS          = $(CFLAGS) -fexternal-templates -Dexternal_templates
#CXXFLAGS        = $(CXXFLAGS) -fexternal-templates -Dexternal_templates
#KFLAGS          = $(KFLAGS) -fexternal-templates -Dexternal_templates
!endif
!endif

# ***** EXTERNAL SOFTWARE CONFIGURATION *****

!ifdef INCLUDE_PVM_SUPPORT
!ifdef USES_PVM
!ifndef PVM_ROOT
BUILDERROR: PVM_ROOT must be defined in environment to build (and run) Paradyn
!endif
!ifndef PVM_ARCH
BUILDERROR: PVM_ROOT must be defined in environment to build (and run) Paradyn
!endif
PVM_INCDIR	= $(PVM_ROOT)/include
PVM_LIBDIR	= $(PVM_ROOT)/lib/$(PVM_ARCH)
IFLAGS		= $(IFLAGS) -I$(PVM_INCDIR)
#LIBDIR		+= $(patsubst %,-L%,$(PVM_LIBDIR))
#VPATH		+= $(PVM_LIBDIR)
!endif
!endif

!ifdef USES_TCLTK
# TCL2C is used to generate compilable sources from tcl files
TCL2C		= $(TO_CORE)/../scripts/tcl2c
TCL2C_GEN_SRCS  = tcl2c.C

# Specify the Tcl/Tk files to be used
!ifdef USE_TCL84

TCLTK_DIR	= p:\paradyn\packages\tcl8.4.3
TCLTK_LIBVER_ID	= 84t
CFLAGS      = $(CFLAGS) -DTCLCONST="const"
CXXFLAGS    = $(CXXFLAGS) -DTCLCONST="const"
TFLAGS      = $(TFLAGS) -DTCLCONST="const"
KFLAGS      = $(KFLAGS) -DTCLCONST="const"

!else

TCLTK_DIR	= p:\paradyn\packages\tcl8.3.4
TCLTK_LIBVER_ID	= 83
CFLAGS      = $(CFLAGS) -DTCLCONST=""
CXXFLAGS    = $(CXXFLAGS) -DTCLCONST=""
TFLAGS      = $(TFLAGS) -DTCLCONST=""
KFLAGS      = $(KFLAGS) -DTCLCONST=""

!endif

TCLTK_INCLUDES	= -I$(TCLTK_DIR)\include
TCLTK_LIBPATH	= -LIBPATH:$(TCLTK_DIR)\lib
TCL_LIB		= tcl$(TCLTK_LIBVER_ID).lib
TK_LIB		= tk$(TCLTK_LIBVER_ID).lib
TCLTK_LIBS	= $(TCL_LIB) $(TK_LIB)

IFLAGS          = $(IFLAGS) $(TCLTK_INCLUDES)
LIBDIR          = $(LIBDIR) $(TCLTK_LIBPATH)
!endif /* USES_TCLTK */


# Include any per-user configuration changes; this "local" config file
# should *not* be under CVS control, so that it never gets committed.

!if exist ($(TO_CORE)\nmake.config.local)
!include $(TO_CORE)\nmake.config.local
!endif
